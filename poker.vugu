<div>
    <main role="main" class="container text-center">
        <div class="jumbotron shadow-lg">
            <img src="poker.png" class="grow">
            <h1 class="display-4 title">A*Team Planning Poker</h1>
            <hr class="my-4">

            <vg-comp expr="c.ActivePanel()"></vg-comp>
        </div>
    </main>
    <footer>
	    <img class="gopher" src="gowasm.png">
    </footer>
</div>

<style>
@import url('https://fonts.googleapis.com/css2?family=Amaranth:wght@700&display=swap');
.title {
    font-family: 'Amaranth', sans-serif;
}

.gopher {
    position: fixed;
    bottom: 20px;
    right: 5%;
    height: 80px;
    z-index: 5;
}

.grow {
    height: 100px;
    animation-name: grow;
    animation-duration: 3s;
}

@keyframes grow {
    from {height: 10px;}
    to   {height: 100px;}
}
</style>

<script type="application/x-go">
import (
    "log"
    "net/http"
    "encoding/json"
    "net/url"
)
type AppState int

const (
	StateLogin AppState = iota
	StateWaiting
	StateSetTopic
	StateVote
	StateResults
)

// Poker Struct
type Poker struct {
	State        AppState
	Users        []*User `vugu:"users" json:"users"`
    Panel        map[AppState]vugu.Builder
    built        bool
    loginUser    *User
    repaintQ     chan bool
}

func NewPoker(repaintQ chan bool) *Poker {
    c := &Poker{
        State: StateLogin,
        Users: []*User{},
        Panel: make(map[AppState]vugu.Builder),
        repaintQ: repaintQ,
    }
    c.Panel[StateLogin] = &Login{app: c}
    c.Panel[StateWaiting] = &Wait{app: c}
    c.Panel[StateSetTopic] = &Topic{app: c}
    c.Panel[StateVote] = &Vote{app: c}
    c.Panel[StateResults] = &Results{app: c}

    c.Load()
    return c
}

func (c *Poker) ActivePanel() vugu.Builder {
    return c.Panel[c.State]
}

func (c *Poker) Load() {
    go func() {
        res, err := http.Get("/api/v1/users")
        if err != nil {
            log.Printf("Error fetching users: %v", err)
            return
        }
        defer res.Body.Close()

        err = json.NewDecoder(res.Body).Decode(&c.Users)
        if err != nil {
            log.Printf("Error JSON decoding: %v", err)
            return
        }
        for _,v := range c.Users {
            if c.loginUser != nil && v.Name == c.loginUser.Name {
                c.loginUser = v
            }
        }
        c.repaintQ <- true
    }()
}

func (c *Poker) Login(userName string) {
    c.Logout()
    for _,v := range c.Users {
        if v.Name == userName {
            go func() {
                res, err := http.PostForm("/api/v1/users/login", url.Values{
                    "user": {userName},
                })
                if err != nil {
                    log.Printf("Error posting login: %v", err)
                    return
                }
                defer res.Body.Close()
                if body,err := ioutil.ReadAll(res.Body); err == nil {
                    log.Printf("Login Response: %v", string(body))
                }
                c.loginUser = v
                v.Status = true
                c.State = StateWaiting
                c.repaintQ <- true
            }()
        }
    }
}

func (c *Poker) Logout() {
    go func() {
        if c.loginUser != nil {
            res, err := http.PostForm("/api/v1/users/logout", url.Values{
                "user": {c.loginUser.Name},
            })
            if err != nil {
                log.Printf("Error posting logout: %v", err)
                return
            }
            defer res.Body.Close()
            if body,err := ioutil.ReadAll(res.Body); err == nil {
                log.Printf("Logout Response: %v", string(body))
            }
        }
        if v,ok := c.Panel[StateLogin].(*Login); ok {
            // clear the current user on the login panel
            v.User = nil
        }
        if c.loginUser != nil {
            c.loginUser.Status = false
        }
        c.loginUser = nil
        c.State = StateLogin
    }()
}
</script>
